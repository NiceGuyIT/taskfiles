---
version: "3"

tasks:
  # These tasks are not used but kept in case they might be used in the future.

  init-dl-gh:
    # gh requires authentication for all actions.
    # https://github.com/cli/cli
    desc: Download 'gh' CLI into the bin directory
    deps:
      - init-create-bin-dir
      - init-dl-yq
    vars:
      # Order matters!
      NAME: cli
      OWNER: cli
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: 'gh{{exeExt}}'
      BIN_NAME: '{{.BIN_DIR}}{{fromSlash "/"}}{{.FILE_NAME}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      ASSET_PATTERN: 'gh_*_{{OS}}_{{ARCH}}{{.COMPRESS_EXT}}'
      REPO_URL: 'https://api.github.com/repos/{{.REPO}}/releases/latest'
      DOWNLOAD_URL:
        sh: |
          curl --silent --location --output - '{{.REPO_URL}}' |
          yq --unwrapScalar '.assets[] | select(.name=={{ quote ASSET_PATTERN }}) | .browser_download_url'
      PACKAGE_NAME:
        sh: |
          curl --silent --location --output - '{{.REPO_URL}}' |
          yq --unwrapScalar '.assets[] | select(.name=={{ quote ASSET_PATTERN }}) | .name'
      PACKAGE_DIR: '{{ trimSuffix .COMPRESS_EXT .PACKAGE_NAME }}'
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v curl{{ end }}'
        msg: |
          curl is required to download files. Please install 'curl' and try again.
      - sh: '{{ if ne OS "windows"}}command -v tar{{ end }}'
        msg: |
          tar is required to extract files from archives. Please install 'tar' and try again.
      - sh: '{{ if ne OS "windows"}}command -v gunzip{{ end }}'
        msg: |
          gunzip is required to uncompress files. Please install 'gunzip'/'gzip' and try again.
    cmds:
      - cmd: |
          curl --silent --location --output - '{{.DOWNLOAD_URL}}' |
          tar --directory '{{.BIN_DIR}}' --strip-components 2 -zxf - '{{.PACKAGE_DIR}}/bin/{{.FILE_NAME}}'
          chmod a+x {{.BIN_NAME}}
        platforms: [linux, darwin]
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command '
            $tmp_file = New-TemporaryFile
            Remove-Item -Path $tmp_file
            $tmp_dir = New-Item -ItemType Directory -Path $(Join-Path -Path $ENV:Temp -ChildPath $tmp_file.Name)
            $zip_file = Join-Path -Path $tmp_dir -ChildPath "{{.NAME}}{{.COMPRESS_EXT}}"
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI {{ quote REPO_URL }} -OutFile $zip_file
            Expand-Archive -Path $zip_file -DestinationPath $tmp_dir
            Copy-Item -Path $(Join-Path -Path $tmp_dir -ChildPath {{ quote NAME }}) -Destination {{.BIN_DIR}}
            Remove-Item -Path $tmp_dir -Recurse
          '
        platforms: [windows]
    status:
      - "{{.BIN_NAME}} --version"

  ghrel:
    desc: Download the ghrel binary
    vars:
      NAME: ghrel
      OWNER: jreisinger
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: '{{.NAME}}{{exeExt}}'
      BIN_NAME: '{{.BIN_DIR}}{{fromSlash "/"}}{{.FILE_NAME}}'
      COMPRESS_EXT: '{{if eq OS "windows"}}.zip{{else}}.tar.gz{{end}}'
      REPO_URL: 'https://api.github.com/repos/{{.REPO}}/releases/latest'
      ASSET_PATTERN: '{{.NAME}}_*_{{OS}}_{{ARCH}}{{.COMPRESS_EXT}}'
      DOWNLOAD_URL:
        sh: |
          curl --silent --location --output - '{{.REPO_URL}}' |
          yq --unwrapScalar '.assets[] | select(.name=={{ quote ASSET_PATTERN }}) | .browser_download_url'
      PACKAGE_NAME:
        sh: |
          curl --silent --location --output - '{{.REPO_URL}}' |
          yq --unwrapScalar '.assets[] | select(.name=={{ quote ASSET_PATTERN }}) | .name'
      PACKAGE_DIR: '{{trimSuffix .COMPRESS_EXT .PACKAGE_NAME}}'
    preconditions:
      - sh: '{{if ne OS "windows"}}command -v curl{{end}}'
        msg: |
          curl is required to download files. Please install 'curl' and try again.
      - sh: '{{if ne OS "windows"}}command -v tar{{end}}'
        msg: |
          tar is required to extract files from archives. Please install 'tar' and try again.
      - sh: '{{if ne OS "windows"}}command -v gunzip{{end}}'
        msg: |
          gunzip is required to uncompress files. Please install 'gunzip'/'gzip' and try again.
      - task: init-bin-dir
    cmds:
      - cmd: |
          {{if eq OS "windows"}}
            powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command '
              $tmp_file = New-TemporaryFile
              Remove-Item -Path $tmp_file
              $tmp_dir = New-Item -ItemType Directory -Path $(Join-Path -Path $ENV:Temp -ChildPath $tmp_file.Name)
              $zip_file = Join-Path -Path $tmp_dir -ChildPath "{{.BASE_NAME}}{{.COMPRESS_EXT}}"
              $ProgressPreference = "SilentlyContinue"
              Invoke-WebRequest -URI {{ quote REPO_URL }} -OutFile $zip_file
              Expand-Archive -Path $zip_file -DestinationPath $tmp_dir
              Copy-Item -Path $(Join-Path -Path $tmp_dir -ChildPath {{ quote NAME }}) -Destination {{.BIN_DIR}}
              Remove-Item -Path $tmp_dir -Recurse
            '
          {{else}}
            curl --silent --location --output - '{{.DOWNLOAD_URL}}' |
            tar --directory '{{.BIN_DIR}}' -zxf - {{.FILE_NAME}}
            chmod a+x {{.BIN_NAME}}
          {{end}}
    status:
      # ghrel doesn't have a --version flag
      - "'{{.BIN_NAME}}' --help"

  scripts-repo-add-upstream:
    desc: Add an upstream repo to the Tactical RMM community scripts.
    summary: |
      This task will add a remote repo as an upstream repo to the TRMM community_scripts repo.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_REPO: Upstream repo URL. Required.
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
       - UPSTREAM_BRANCH: Upstream branch to track. Default: '{{.TRMM_DEFAULT_UPSTREAM_BRANCH}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH | default .TRMM_DEFAULT_UPSTREAM_BRANCH }}'
    platforms: [linux]
    deps:
      - :install:rg
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone and work with repos. Please install 'git' and try again.
      - sh: '[ ! -z {{ quote .REPO_DIR }} ]'
        msg: REPO_DIR is not defined. Please set it to the community scripts directory.
      - sh: '[ ! -z {{ quote .UPSTREAM_REPO }} ]'
        msg: UPSTREAM_REPO is not defined. Please set it to the upstream git repo for your scripts.
    cmds:
      - cmd: 'echo "TRMM_USER: {{.TRMM_USER}}"'
      - cmd: 'echo "REPO_DIR: {{.REPO_DIR}}"'
      - cmd: 'echo "UPSTREAM_NAME: {{.UPSTREAM_NAME}}"'
      - cmd: 'echo "UPSTREAM_REPO: {{.UPSTREAM_REPO}}"'
      - cmd: 'echo "UPSTREAM_BRANCH: {{.UPSTREAM_BRANCH}}"'
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git remote add {{ if .UPSTREAM_BRANCH }}--track {{ squote .UPSTREAM_BRANCH}}{{ end }} {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_REPO}}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git remote -v
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git push --verbose {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_BRANCH }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
    status:
      - |
        {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
          cd {{ squote .REPO_DIR }}
          git remote -v | rg --quiet {{ squote (print "^" .UPSTREAM_NAME) }}
        {{ if ne .USER .TRMM_USER }}EOT{{ end }}


  scripts-repo-add-example:
    desc: Add an example and commit to the upstream repo.
    summary: |
      This task will add a "Hello World!" script to the upstream repo to be used as an example.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
       - UPSTREAM_BRANCH: Upstream branch to track. Default: '{{.TRMM_DEFAULT_UPSTREAM_BRANCH}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH | default .TRMM_DEFAULT_UPSTREAM_BRANCH }}'
      UPSTREAM_JSON: 'community_scripts-{{.UPSTREAM_NAME}}.json'
      HELLO_WORLD: 'hello-world.sh'
    deps:
      - :init:all
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone repos. Please install 'git' and try again.
      - sh: '[ ! -z {{ quote .REPO_DIR }} ]'
        msg: 'REPO_DIR is not defined. Please set it to the community scripts directory.'
      - sh: '[ ! -z {{ quote .UPSTREAM_NAME }} ]'
        msg: 'UPSTREAM_NAME is not defined. Please set it to the name of an upstream git repo.'
      - sh: '[ ! -z {{ quote .UPSTREAM_BRANCH }} ]'
        msg: 'UPSTREAM_BRANCH is not defined. Please set it to the name of the upstream branch.'
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            cat << 'EOJ' | yq --output-format=json --no-colors > {{ squote .UPSTREAM_JSON }} '.'
              [{
                "guid": "525048e9-f25b-4ffc-bb13-0d098d56430e",
                "filename": "../{{.UPSTREAM_NAME}}/{{.HELLO_WORLD}}",
                "submittedBy": {{ quote UPSTREAM_NAME }},
                "name": "🔧 Example - Hello World",
                "description": "Hello World example to demonstrate merging community scripts.",
                "syntax": "",
                "args": [],
                "default_timeout": "10",
                "shell": "shell",
                "supported_platforms": [
                  "linux",
                  "darwin"
                ],
                "category": "TRMM (All):Other"
              }]
          EOJ
            git add {{ squote .UPSTREAM_JSON }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            mkdir {{ squote .UPSTREAM_NAME }}
            cat << 'EOF' > {{ squote (print .UPSTREAM_NAME "/" .HELLO_WORLD) }}
          #!/usr/bin/env bash

          # Feel free to delete this example script from the directory and JSON
          # Filename: {{ squote (print .UPSTREAM_NAME "/" .HELLO_WORLD) }}
          # JSON: {{ squote .UPSTREAM_JSON }}
          echo "Hello World!"
          EOF
            git add {{ squote (print .UPSTREAM_NAME "/" .HELLO_WORLD) }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git commit --message 'First commit to upstream {{ quote .UPSTREAM_NAME }}'
            git push --verbose {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_BRANCH }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
    status:
      - '[ -f "{{.REPO_DIR}}/{{.UPSTREAM_NAME}}/{{.HELLO_WORLD}}" ]'
      - '[ -f "{{.REPO_DIR}}/{{.UPSTREAM_JSON}}" ]'
