---
version: "3"

vars:
  SOFTWARE_LIST: |
    age
    age-keygen
    cfssl-certinfo
    lego
    rclone
    ripgrep
    sops

tasks:

  all:
    desc: Install all binaries
    cmds:
      - task: age
      - task: age-keygen
      - task: cfssl-certinfo
      - task: docker-compose
      - task: lego
      - task: rclone
      - task: ripgrep
      - task: sops

  uninstall:
    # docker-compose needs special treatment to remove.
    # ripgrep is named 'rg'
    desc: Clean up (remove) installed binaries
    vars:
      BINARIES: |
        cfssl-certinfo
        lego
        rclone
        rg
        age
        age-keygen
        sops
    preconditions:
      - sh: '[ "{{.BIN_DIR}}" != "" ]'
      - sh: 'test -d "{{.BIN_DIR}}"'
    cmds:
      # - cmd: 'echo BIN_DIR: {{.BIN_DIR}}'
      - cmd: |
          {{- range $i, $file := .SOFTWARE_LIST | trim | splitLines -}}
            {{ $bin := (print $.BIN_DIR "/" $file) | fromSlash }}
            test -f '{{$bin}}' || echo 'Binary "{{$bin}}" was not found.'
            test -f '{{$bin}}' && echo 'Deleting {{$bin}}' && rm '{{$bin}}'
          {{- end }}
          echo 'System cleaned from binary files'


  docker-compose:
    # Install the "compose" plugin for docker. This is "docker compose" v2 instead of "docker-compose" v1. Installs are
    # supported only for Linux.
    # https://docs.docker.com/compose/install/
    # https://github.com/docker/compose
    desc: Install the 'compose' plugin for "docker compose" v2.
    vars:
      BIN_DIR_ROOT: '/usr/local/lib/docker/cli-plugins'
      BIN_DIR_USER: '{{.HOME}}/.docker/cli-plugins'
      BIN_DIR:
        sh: |
          {{- if eq OS "windows" -}}
            {{fail "Windows is not supported. Install Docker Desktop for 'docker compose'"}}
          {{- else -}}
            echo '{{if eq .USER "root" -}} {{.BIN_DIR_ROOT}} {{- else -}} {{.BIN_DIR_USER}} {{- end}}'
          {{- end -}}
      NAME: compose
      OWNER: docker
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{ if eq ARCH "amd64" }}x86_64{{ else if eq ARCH "arm64" }}aarch64{{ else }}{{ARCH}}{{ end }}'
      ASSET_PATTERN: '{{.OWNER}}_{{.NAME}}_{{OS}}_{{.ARCH}}{{exeExt}}'
    # TODO: Should other OS's be supported?
    # Officially, manually installing "compose" is supported only on Linux. Other OS's are expected to install
    # Docker Desktop.
    platforms: [linux]
    deps:
      - task: :init:all
        vars: {
          BIN_DIR: '{{.BIN_DIR}}'
        }
    cmds:
      # - cmd: 'echo "BIN_DIR: {{.BIN_DIR}}"'
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          REPO: 'docker/compose',
          ARCH: '{{.ARCH}}',
          ASSET_PATTERN: '{{.OWNER}}-{{.NAME}}-{{OS}}-{{.ARCH}}{{exeExt}}',
          BIN_DIR: '{{.BIN_DIR}}'
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.NAME}}" --help'

  cfssl-certinfo:
    # https://github.com/cloudflare/cfssl
    desc: Install 'cfssl-certinfo' to query certificates
    vars:
      NAME: cfssl-certinfo
      OWNER: cloudflare
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{if eq ARCH "arm64"}}amd64{{else}}{{ARCH}}{{end}}'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          REPO: 'cloudflare/cfssl',
          ARCH: '{{.ARCH}}',
          ASSET_PATTERN: '{{.NAME}}_*_{{OS}}_{{.ARCH}}{{exeExt}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.NAME}}" --help'

  lego:
    # https://github.com/go-acme/lego
    desc: Install 'lego', a Let's Encrypt/ACME client.
    vars:
      NAME: lego
      OWNER: go-acme
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          # Append * to match any COMPRESS_EXT
          ASSET_PATTERN: '{{.NAME}}_*_{{OS}}_{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.NAME}}" --help'

  rclone:
    # https://github.com/rclone/rclone
    desc: Install 'rclone', rsync for cloud storage.
    vars:
      NAME: rclone
      OWNER: rclone
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      OS: '{{ if eq OS "darwin" }}osx{{ else }}{{OS}}{{end}}'
      COMPRESS_EXT: '.zip'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          ASSET_DIR: true,
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{.OS}}-{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.NAME}}" version'

  ripgrep:
    # https://github.com/BurntSushi/ripgrep
    desc: Install 'ripgrep' (command 'rg'), an enhanced grep.
    aliases: [rg]
    vars:
      NAME: ripgrep
      OWNER: BurntSushi
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{if eq ARCH "amd64"}}x86_64{{else}}{{ARCH}}{{end}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      FILE_NAME: 'rg'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          FILE_NAME: '{{.FILE_NAME}}',
          ASSET_DIR: true,
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{.ARCH}}-unknown-{{OS}}-musl{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.FILE_NAME}}" --version'

  age:
    # https://github.com/FiloSottile/age
    desc: Install 'age' file encryption.
    vars:
      NAME: age
      OWNER: FiloSottile
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          ASSET_DIR: true,
          PACKAGE_DIR: 'age',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{OS}}-{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.FILE_NAME}}" --version'

  age-keygen:
    # https://github.com/FiloSottile/age
    desc: Install 'age-keygen' from the age file encryption package.
    vars:
      NAME: age
      OWNER: FiloSottile
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      FILE_NAME: 'age-keygen'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          FILE_NAME: '{{.FILE_NAME}}',
          ASSET_DIR: true,
          PACKAGE_DIR: 'age',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{OS}}-{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.FILE_NAME}}" --version'

  sops:
    # https://github.com/mozilla/sops
    desc: Install 'sops', a simple and flexible tool for managing secrets.
    vars:
      NAME: sops
      OWNER: mozilla
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
    deps:
      - :init:all
    cmds:
      # vars are not passed to subtasks automatically.
      # https://taskfile.dev/usage/#variables
      # https://github.com/go-task/task/issues/888#issuecomment-1273264393
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          ASSET_PATTERN: '{{.NAME}}-*.{{OS}}.{{.ARCH}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{.BIN_DIR}}{{ fromSlash "/" }}{{.FILE_NAME}}" --version'
