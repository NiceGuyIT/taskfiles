---
version: "3"

vars:
  SOFTWARE_LIST: |
    age
    age-keygen
    alacritty
    atuin
    cfssl-certinfo
    fzf
    lego
    rclone
    ripgrep
    sops

tasks:

  all:
    desc: Install all binaries
    cmds:
      - task: age
      - task: age-keygen
      - task: alacritty
      - task: atuin
      - task: cfssl-certinfo
      - task: docker-compose
      - task: fzf
      - task: lego
      - task: rclone
      - task: ripgrep
      - task: sops

  uninstall:
    # docker-compose needs special treatment to remove.
    # ripgrep is named 'rg'
    desc: Clean up (remove) installed binaries
    vars:
      BINARIES: |
        age
        age-keygen
        alacritty
        atuin
        cfssl-certinfo
        fzf
        lego
        rclone
        rg
        sops
    preconditions:
      - sh: '[ ! -z {{ quote .BIN_DIR }} ]'
      - sh: 'test -d {{ quote .BIN_DIR }}'
    cmds:
      # - cmd: 'echo BIN_DIR: {{.BIN_DIR}}'
      - cmd: |
          {{- range $i, $file := .SOFTWARE_LIST | trim | splitLines -}}
            {{ $bin := (print $.BIN_DIR "/" $file) | fromSlash }}
            test -f '{{$bin}}' || echo 'Binary "{{$bin}}" was not found.'
            test -f '{{$bin}}' && echo 'Deleting {{$bin}}' && rm '{{$bin}}'
          {{- end }}
          echo 'System cleaned from binary files'


  docker-compose:
    # Install the "compose" plugin for docker. This is "docker compose" v2 instead of "docker-compose" v1. Installs are
    # supported only for Linux.
    # https://docs.docker.com/compose/install/
    # https://github.com/docker/compose
    desc: Install the 'compose' plugin for "docker compose" v2
    vars:
      BIN_DIR_ROOT: '/usr/local/lib/docker/cli-plugins'
      BIN_DIR_USER: '{{.HOME}}/.docker/cli-plugins'
      BIN_DIR:
        sh: |
          {{- if eq OS "windows" -}}
            {{fail "Windows is not supported. Install Docker Desktop for 'docker compose'"}}
          {{- else -}}
            echo {{if eq .USER "root" -}} {{ squote .BIN_DIR_ROOT }} {{- else -}} {{ squote .BIN_DIR_USER }} {{- end}}
          {{- end -}}
      NAME: compose
      OWNER: docker
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{ if eq ARCH "amd64" }}x86_64{{ else if eq ARCH "arm64" }}aarch64{{ else }}{{ARCH}}{{ end }}'
      ASSET_PATTERN: '{{.OWNER}}_{{.NAME}}_{{OS}}_{{.ARCH}}{{exeExt}}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    # TODO: Should other OS's be supported?
    # Officially, manually installing "compose" is supported only on Linux. Other OS's are expected to install
    # Docker Desktop.
    platforms: [linux]
    deps:
      - task: :init:create-bin-dir
        vars: {
          BIN_DIR: '{{.BIN_DIR}}'
        }
    cmds:
      - cmd: 'echo "BIN_DIR: {{.BIN_DIR}}"'
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          REPO: 'docker/compose',
          ARCH: '{{.ARCH}}',
          ASSET_PATTERN: '{{.OWNER}}-{{.NAME}}-{{OS}}-{{.ARCH}}{{exeExt}}',
          BIN_DIR: '{{.BIN_DIR}}'
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --help'

  age:
    # https://github.com/FiloSottile/age
    desc: Install 'age' file encryption
    vars:
      NAME: age
      OWNER: FiloSottile
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          ASSET_DIR: true,
          PACKAGE_DIR: 'age',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{OS}}-{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --version'

  age-keygen:
    # https://github.com/FiloSottile/age
    desc: Install 'age-keygen' from the age file encryption package
    vars:
      NAME: age
      OWNER: FiloSottile
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      FILE_NAME: 'age-keygen{{exeExt}}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          FILE_NAME: '{{.FILE_NAME}}',
          ASSET_DIR: true,
          PACKAGE_DIR: 'age',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{OS}}-{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .FILE_NAME) }}" --version'

  cfssl-certinfo:
    # https://github.com/cloudflare/cfssl
    desc: Install 'cfssl-certinfo' to query certificates
    vars:
      NAME: cfssl-certinfo
      OWNER: cloudflare
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{if eq ARCH "arm64"}}amd64{{else}}{{ARCH}}{{end}}'
      SEMVER_REGEX: ''
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          REPO: 'cloudflare/cfssl',
          ARCH: '{{.ARCH}}',
          ASSET_PATTERN: '{{.NAME}}_*_{{OS}}_{{.ARCH}}{{exeExt}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --help'

  alacritty:
    # https://github.com/alacritty/alacritty
    desc: Install 'alacritty', a fast, cross-platform, OpenGL terminal emulator
    vars:
      NAME: alacritty
      OWNER: alacritty
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{if eq ARCH "amd64"}}x86_64{{else}}{{ARCH}}{{end}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      # 'task --verbose' will cause task to run the command to process the Go template to display what it _would_
      # run. This has the side effect of executing the dynamic variables in the task.
      - cmd: |
          task --silent github:download \
            NAME={{ squote .NAME }} \
            OWNER={{ squote .OWNER }} \
            ARCH={{ squote .ARCH }} \
            ASSET_PATTERN='Alacritty-*-portable{{exeExt}}'
        platforms: [windows]
      - cmd: |
          if command -v brew >/dev/null; then
            echo "Installing alacritty"
            echo brew install alacritty
          else
            echo "brew is not installed"
            exit 1
          fi
        platforms: [darwin]
      - cmd: |
          if command -v cargo >/dev/null; then
            echo "Installing alacritty"
            cargo install alacritty
          else
            echo "cargo is not installed"
            exit 1
          fi
        platforms: [linux]
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --help'

  atuin:
    # https://github.com/ellie/atuin
    desc: Install 'atuin', magical shell history
    vars:
      NAME: atuin
      OWNER: ellie
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{if eq ARCH "amd64"}}x86_64{{else}}{{ARCH}}{{end}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      # 'task --verbose' will cause task to run the command to process the Go template to display what it _would_
      # run. This has the side effect of executing the dynamic variables in the task.
      - cmd: |
          task --silent github:download \
            NAME={{ squote .NAME }} \
            OWNER={{ squote .OWNER }} \
            ARCH={{ squote .ARCH }} \
            ASSET_DIR='true' \
            COMPRESS_EXT={{ squote .COMPRESS_EXT }} \
            ASSET_PATTERN='{{.NAME}}-*-{{.ARCH}}-unknown-{{OS}}-musl{{.COMPRESS_EXT}}'
        platforms: [darwin, linux]
      - cmd: |
          echo "Windows is not supported"
          echo "See https://github.com/ellie/atuin/issues/618#issuecomment-1318324668"
        platforms: [windows]
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --version'

  fzf:
    # https://github.com/junegunn/fzf
    desc: Install 'fzf', a command-line fuzzy finder
    vars:
      NAME: fzf
      OWNER: junegunn
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '.zip'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{OS}}_{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --version'

  lego:
    # https://github.com/go-acme/lego
    desc: Install 'lego', a Let's Encrypt/ACME client
    vars:
      NAME: lego
      OWNER: go-acme
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          # Append * to match any COMPRESS_EXT
          ASSET_PATTERN: '{{.NAME}}_*_{{OS}}_{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --help'

  rclone:
    # https://github.com/rclone/rclone
    desc: Install 'rclone', rsync for cloud storage
    vars:
      NAME: rclone
      OWNER: rclone
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      OS: '{{ if eq OS "darwin" }}osx{{ else }}{{OS}}{{end}}'
      COMPRESS_EXT: '.zip'
      SEMVER_REGEX: 'v[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          ASSET_DIR: true,
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{.OS}}-{{.ARCH}}{{.COMPRESS_EXT}}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --version'

  ripgrep:
    # https://github.com/BurntSushi/ripgrep
    desc: Install 'ripgrep' (command 'rg'), an enhanced grep
    aliases: [rg]
    vars:
      NAME: ripgrep
      OWNER: BurntSushi
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{if eq ARCH "amd64"}}x86_64{{else}}{{ARCH}}{{end}}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      FILE_NAME: 'rg{{exeExt}}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          FILE_NAME: '{{.FILE_NAME}}',
          ASSET_DIR: true,
          COMPRESS_EXT: '{{.COMPRESS_EXT}}',
          ASSET_PATTERN: '{{.NAME}}-*-{{.ARCH}}-*-{{OS}}{{ if eq OS "linux"}}-musl{{ else if eq OS "windows" }}-gnu{{ end }}{{.COMPRESS_EXT}}'
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .FILE_NAME) }}" --version'

  sops:
    # https://github.com/mozilla/sops
    desc: Install 'sops', a simple and flexible tool for managing secrets
    vars:
      NAME: sops
      OWNER: mozilla
      # .ARCH needs to be defined here because ASSET_PATTERN is evaluated before calling the task.
      ARCH: '{{.ARCH | default ARCH}}'
      SEMVER_REGEX: 'v?[0-9]+\.([0-9]+\.?){1,}'
    cmds:
      - task: :github:download
        vars: {
          NAME: '{{.NAME}}',
          OWNER: '{{.OWNER}}',
          ARCH: '{{.ARCH}}',
          ASSET_PATTERN: '{{.NAME}}-*{{ if eq OS "windows" }}{{exeExt}}{{ else }}.{{OS}}.{{.ARCH}}{{ end }}',
        }
    status:
      # Note: This explicitly checks if the file is in BIN_DIR. This means multiple versions can be installed, one in
      # root and one in the user's bin directory.
      # TODO: Check for version numbers to see if it needs to be updated.
      - '"{{ osClean (print .BIN_DIR "/" .NAME) }}" --version'
