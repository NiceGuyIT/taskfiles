---
version: '3'

tasks:

  user-exists:
    desc: Check if the system (OS) user exists.
    summary: |
      This task will check if the given user exists.

      variables:
       - CHECK_USER: User to check. Required.
    vars:
      # Note: USER conflicts with the .USER variable representing the current user.
      CHECK_USER: '{{.CHECK_USER}}'
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v id{{ end }}'
        msg: |
          id is required to check if the user exists. Please install 'id' and try again.
      - sh: '! [ -z {{ squote .CHECK_USER }} ]'
        msg: |
          CHECK_USER "{{.CHECK_USER}}" was not specified or is empty.
    platforms: [linux]
    cmds:
      - cmd: |
          if id {{ quote .CHECK_USER }} >/dev/null
          then
            echo {{ quote .CHECK_USER }}
          fi

  in-path:
    desc: Check if a directory is in the PATH
    summary: |
      This task will check if the given directory is in the PATH.

      variables:
       - CHECK_PATH: Path to check
    vars:
      CHECK_PATH: '{{.CHECK_PATH}}'
    cmds:
      - cmd: |
          if [[ "{{.ENV_PATH_SEP}}$PATH{{.ENV_PATH_SEP}}" == *"{{.ENV_PATH_SEP}}{{.CHECK_PATH}}{{.ENV_PATH_SEP}}"* ]]; then
            echo "{{.CHECK_PATH}}"
          fi

  get-win-registry:
    desc: Get the windows registry value at the given key location
    summary: |
      This task will get the windows registry value at the given location.

      variables:
       - REG_PATH: Path to the registry key and value, in PowerShell format. I.e. HKCU:\Environment\Path
    platforms:
      - windows
    preconditions:
      - sh: '[ ! -z {{ quote .REG_PATH }} ]'
        msg: '.REG_PATH is not defined'
    vars:
      # REG_PATH_KEY is used to prevent conflicts with REG_PATH, REG_KEY, and REG_VALUE provided externally.
      REG_PATH_KEY:
        sh: |
          reg_path="{{.REG_PATH}}"
          echo "${reg_path%\\*}"
      # REG_PROPERTY_VALUE is used to prevent conflicts with REG_PATH, REG_KEY, and REG_VALUE provided externally.
      REG_PROPERTY_VALUE:
        sh: |
          reg_path="{{.REG_PATH}}"
          echo "${reg_path##*\\}"
    cmds:
      # See https://stackoverflow.com/questions/15511809/how-do-i-get-the-value-of-a-registry-key-and-only-the-value-using-powershell
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            (Get-ItemProperty -Path "{{.REG_PATH_KEY}}" -Name "{{.REG_PROPERTY_VALUE}}").{{.REG_PROPERTY_VALUE}}

          EOT

  set-win-registry:
    desc: Set the windows registry value at the given key location
    summary: |
      This task will set the windows registry value at the given location. This accept only existing keys with their
      type already defined. Creating new registry keys is not supported by this task.

      variables:
       - REG_PATH: Path to the registry key and value, in PowerShell format. I.e. HKCU:\Environment\Path
       - REG_VALUE: Registry value to set.
    platforms:
      - windows
    preconditions:
      - sh: '[ ! -z {{ quote .REG_PATH }} ]'
        msg: '.REG_PATH is not defined'
    vars:
      # REG_PATH_KEY is used to prevent conflicts with REG_PATH, REG_KEY, and REG_VALUE provided externally.
      REG_PATH_KEY:
        sh: |
          reg_path="{{.REG_PATH}}"
          echo "${reg_path%\\*}"
      # REG_PROPERTY_VALUE is used to prevent conflicts with REG_PATH, REG_KEY, and REG_VALUE provided externally.
      REG_PROPERTY_VALUE:
        sh: |
          reg_path="{{.REG_PATH}}"
          echo "${reg_path##*\\}"
      REG_KEY_EXISTS:
        sh: |
          task --silent system:get-win-registry REG_PATH="{{.REG_PATH}}"
    cmds:
      # See https://stackoverflow.com/questions/15511809/how-do-i-get-the-value-of-a-registry-key-and-only-the-value-using-powershell
      - cmd: |
          {{ if not .REG_KEY_EXISTS }}
            {{ fail "Registry key does not exist" }}
          {{ else }}
            # NOOP
            true
          {{ end }}
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            Set-ItemProperty -Path "{{.REG_PATH_KEY}}" -Name "{{.REG_PROPERTY_VALUE}}" -Value "{{.REG_VALUE}}"

          EOT

  backup-nspawn:
    desc: Backup an nspawn container
    summary: |
      This task will shut down the nspawn container, backup the directory and then start the container.

      variables:
       - BACKUP_DIR: Directory to save the backup.
       - MACHINE_NAME: nspawn container to backup.
    vars:
      TIMESTAMP: '{{ now | date "20060102T150405Z0700" }}'
    preconditions:
      - sh: '[ ! -z {{ squote .BACKUP_DIR }} ]'
        msg: |
          BACKUP_DIR {{ quote .BACKUP_DIR }} is empty. Please specify the backup directory.
      - sh: '[ ! -z {{ squote .MACHINE_NAME }} ]'
        msg: |
          MACHINE_NAME {{ quote .MACHINE_NAME }} is empty. Please specify the machine to backup.
    platforms: [linux]
    cmds:
      # Note: 'machinectl show' and 'machinectl status' return errors if the machine is not running.
      # Use 'machinectl list | grep ...' to check if the machine is running.
      - cmd: |
          machinectl list | rg '^{{.MACHINE_NAME}}' && machinectl stop {{.MACHINE_NAME}}
          while
            machinectl list | rg '^{{.MACHINE_NAME}}'
          do
            sleep 1
          done
          machinectl list

          cd $(dirname $(realpath /var/lib/machines/{{.MACHINE_NAME}})) || exit 1
          tar --create --use-compress-program zstd --file {{.BACKUP_DIR}}/{{.MACHINE_NAME}}.{{.TIMESTAMP}}.tar.zstd {{.MACHINE_NAME}}
          ls -lh {{.BACKUP_DIR}}
          df -Th {{.BACKUP_DIR}}
