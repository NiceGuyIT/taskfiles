---
version: "3"

tasks:

  all:
    desc: Initialize (download) the necessary utilities.
    interactive: true
    cmds:
      - task: create-bin-dir
        vars: {
          BIN_DIR: '{{.BIN_DIR}}'
        }
      - task: dl-yq
      - cmd: |
          sleep 1
      - task: dl-task
      - cmd: |
          sleep 1
      - task: dl-xh
      - cmd: |
          sleep 1
      - task: dl-ouch
      - cmd: |
          sleep 1
      - task: dl-coreutils
      - cmd: |
          sleep 1
      - task: add-bin-dir-to-path
    status:
      - task --verbose init:create-bin-dir
      - task --verbose init:dl-yq
      - task --verbose init:dl-task
      - task --verbose init:dl-xh
      - task --verbose init:dl-ouch
      - task --verbose init:dl-coreutils
      - task --verbose init:add-bin-dir-to-path

  create-bin-dir:
    desc: Create the bin directory
    preconditions:
      - sh: '[ ! -z {{ quote .BIN_DIR }} ]'
        msg: '.BIN_DIR is not defined'
    cmds:
      # - cmd: 'echo "PATH: {{.PATH}}"'
      # - cmd: 'echo "BIN_DIR: {{.BIN_DIR}}"'
      - cmd: |
          {{ if ne OS "windows" }}
            mkdir --parents "{{.BIN_DIR}}"
          {{ else }}
            powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
              if (-not (Test-Path -Path "{{.BIN_DIR}}")) {
                New-Item -Path "{{.BIN_DIR}}" -ItemType Directory | Out-Null
              }

          EOT
          {{ end }}
    status:
      - test -d "{{.BIN_DIR}}"

  # Default system PATH:
  # C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\ProgramData\chocolatey\bin
  # User PATH:
  # C:\Users\dev\AppData\Local\Microsoft\WindowsApps
  add-bin-dir-to-path:
    desc: Add BIN_DIR to the PATH env var
    summary: |
      This task will add BIN_DIR to the system or user path on Windows. macOS and Linux use "/usr/local/bin" for the
      system path, and "$HOME/bin" for the user path. Both of these are included in $PATH by default. If the user
      specifies a different BIN_DIR, it's up to them to add it to the PATH.
    preconditions:
      - sh: '[ ! -z {{ quote .BIN_DIR }} ]'
        msg: '.BIN_DIR is not defined'
    vars:
      ENV_PATH_USER: 'HKCU:\Environment\Path'
      ENV_PATH_SYSTEM: 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment\Path'
      CURRENT_PATH:
        sh: |
          {{ if eq OS "windows" }}
            {{ if .HAS_SYSTEM_PERMISSION }}
              task --silent system:get-win-registry REG_PATH="{{.ENV_PATH_SYSTEM}}"
            {{ else }}
              task --silent system:get-win-registry REG_PATH="{{.ENV_PATH_USER}}"
            {{ end }}
          {{ end }}
      PATH_EXISTS:
        # Export the PATH to make sure we are testing only the user or system PATH.
        sh: |
          {{ if eq OS "windows" }}
            task=$(command -v task{{exeExt}})
            export PATH="{{.CURRENT_PATH}}"
            "$task" --silent system:in-path CHECK_PATH="{{.BIN_DIR}}"
          {{ end }}
    cmds:
      - cmd: |
          {{ if not .PATH_EXISTS }}
            {{ if .HAS_SYSTEM_PERMISSION }}
              task --verbose system:set-win-registry REG_PATH="{{.ENV_PATH_SYSTEM}}" REG_VALUE="{{.CURRENT_PATH}}{{.ENV_PATH_SEP}}{{.BIN_DIR}}"
            {{ else }}
              task --verbose system:set-win-registry REG_PATH="{{.ENV_PATH_USER}}" REG_VALUE="{{.CURRENT_PATH}}{{.ENV_PATH_SEP}}{{.BIN_DIR}}"
            {{ end }}
          {{ else }}
            echo "Path already exists. No action taken."
          {{ end }}
        platforms: [windows]

  dl-yq:
    # https://github.com/mikefarah/yq
    desc: Download 'yq', a portable command-line YAML, JSON, XML, CSV, TOML and properties processor
    deps:
      - create-bin-dir
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v curl{{ end }}'
        msg: |
          curl is required to download files. Please install 'curl' and try again.
    vars:
      # Order matters!
      NAME: yq
      OWNER: mikefarah
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: '{{.NAME}}{{exeExt}}'
      BIN_NAME: '{{ print .BIN_DIR .FS_PATH_SEP .FILE_NAME | osClean }}'
      ASSET_PATTERN: '{{.NAME}}_{{OS}}_{{ARCH}}{{exeExt}}'
      REPO_URL: 'https://github.com/{{.REPO}}/releases/latest/download/{{.ASSET_PATTERN}}'
    cmds:
      - cmd: |
          {{ if ne OS "windows" }}
            curl --silent --location --output "{{.BIN_NAME}}" {{ squote .REPO_URL }}
            chmod a+x "{{.BIN_NAME}}"
          {{ end }}
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI {{ squote .REPO_URL }} -OutFile "{{.BIN_NAME}}"

          EOT
        platforms: [windows]
    status:
      - '"{{ print .BIN_DIR .FS_PATH_SEP .NAME exeExt | osClean }}" --version'

  dl-task:
    # https://github.com/go-task/task
    desc: Download 'task', a task runner / simpler Make alternative written in Go
    deps:
      - create-bin-dir
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v curl{{ end }}'
        msg: |
          curl is required to download files. Please install 'curl' and try again.
      - sh: '{{ if ne OS "windows"}}command -v tar{{ end }}'
        msg: |
          tar is required to extract files from archives. Please install 'tar' and try again.
      - sh: '{{ if ne OS "windows"}}command -v gunzip{{ end }}'
        msg: |
          gunzip is required to uncompress files. Please install 'gunzip'/'gzip' and try again.
    vars:
      # Order matters!
      NAME: task
      OWNER: go-task
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: '{{.NAME}}{{exeExt}}'
      BIN_NAME: '{{ print .BIN_DIR .FS_PATH_SEP .FILE_NAME | osClean }}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      ASSET_PATTERN: '{{.NAME}}_{{OS}}_{{ARCH}}{{.COMPRESS_EXT}}'
      REPO_URL: 'https://github.com/{{.REPO}}/releases/latest/download/{{.ASSET_PATTERN}}'
    cmds:
      - cmd: |
          curl --location --output - {{ squote .REPO_URL }} |
          tar -C {{ squote .BIN_DIR }} -zxf - {{ squote .NAME}}
          chmod a+x {{.BIN_NAME}}
        platforms: [linux, darwin]
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            $tmp_file = New-TemporaryFile
            Remove-Item -Path $tmp_file
            $tmp_dir = New-Item -ItemType Directory -Path $(Join-Path -Path $ENV:Temp -ChildPath $tmp_file.Name)
            $zip_file = Join-Path -Path $tmp_dir -ChildPath "{{.NAME}}{{.COMPRESS_EXT}}"
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI {{ squote .REPO_URL }} -OutFile $zip_file
            Expand-Archive -Path $zip_file -DestinationPath $tmp_dir
            Copy-Item -Path $(Join-Path -Path $tmp_dir -ChildPath {{ print .FILE_NAME | osClean }}) -Destination {{ print .BIN_DIR | osClean}}
            Remove-Item -Path $tmp_dir -Recurse

          EOT
        platforms: [windows]
    status:
      - '"{{ print .BIN_DIR .FS_PATH_SEP .NAME exeExt | osClean }}" --version'

  dl-xh:
    # https://github.com/ducaale/xh
    desc: Download 'xh', friendly and fast tool for sending HTTP requests
    deps:
      - create-bin-dir
      - dl-yq
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v curl{{ end }}'
        msg: |
          curl is required to download files. Please install 'curl' and try again.
      - sh: '{{ if ne OS "windows"}}command -v tar{{ end }}'
        msg: |
          tar is required to extract files from archives. Please install 'tar' and try again.
      - sh: '{{ if ne OS "windows"}}command -v gunzip{{ end }}'
        msg: |
          gunzip is required to uncompress files. Please install 'gunzip'/'gzip' and try again.
    vars:
      NAME: xh
      OWNER: ducaale
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: '{{.NAME}}{{exeExt}}'
      BIN_NAME: '{{ print .BIN_DIR .FS_PATH_SEP .FILE_NAME | osClean }}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      REPO_URL: 'https://api.github.com/repos/{{.REPO}}/releases/latest'
      # Some packages use x86_64 instead of amd64
      ARCH: '{{ if or (eq ARCH "amd64") (eq ARCH "arm64") }}x86_64{{ else }}{{ARCH}}{{ end }}'
      ASSET_PATTERN: '{{.NAME}}-*-{{.ARCH}}-*-{{OS}}*{{.COMPRESS_EXT}}'
      # FIXME: The dynamic variables are executed before determining the status, resulting in 2 unauthenticated calls
      # FIXME: to the GitHub API. This should be fixed.
      # FIXME: More importantly, tasks that depend on 'xh' will also result in 2 API calls.
      # FIXME: If many tasks are run concurrently, it's possible to exceed the API limits and get locked out for a
      # FIXME: minute.
      DOWNLOAD_URL:
        sh: |
          {{ if ne OS "windows" }}
            curl --silent --location --output - {{ squote .REPO_URL }} |
          {{ else }}
            powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT' |
              $ProgressPreference = "SilentlyContinue"
              Invoke-WebRequest -URI {{ squote .REPO_URL }} | Select-Object -Expand Content

          EOT
          {{ end -}}
          "{{ print .BIN_DIR .FS_PATH_SEP "yq" exeExt | osClean }}" --unwrapScalar '.assets[] | select(.name=={{ quote .ASSET_PATTERN }}) | .browser_download_url'
      PACKAGE_NAME:
        sh: |
          {{ if ne OS "windows" }}
            curl --silent --location --output - {{ squote .REPO_URL }} |
          {{ else }}
            powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT' |
              $ProgressPreference = "SilentlyContinue"
              Invoke-WebRequest -URI {{ squote .REPO_URL }} | Select-Object -Expand Content

          EOT
          {{ end -}}
          "{{ print .BIN_DIR .FS_PATH_SEP "yq" exeExt | osClean }}" --unwrapScalar '.assets[] | select(.name=={{ quote .ASSET_PATTERN }}) | .name'
      PACKAGE_DIR: '{{ trimSuffix .COMPRESS_EXT .PACKAGE_NAME }}'
    cmds:
      - cmd: |
          curl --silent --location --output - {{ squote .DOWNLOAD_URL }} |
          tar --directory {{ squote .BIN_DIR }} --strip-components 1 -zxf - {{ squote (print .PACKAGE_DIR "/" .FILE_NAME) }}
          chmod a+x {{ squote .BIN_NAME}}
        platforms: [linux, darwin]
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            $tmp_file = New-TemporaryFile
            Remove-Item -Path $tmp_file
            $tmp_dir = New-Item -ItemType Directory -Path $(Join-Path -Path $ENV:Temp -ChildPath $tmp_file.Name)
            $zip_file = Join-Path -Path $tmp_dir -ChildPath "{{.NAME}}{{.COMPRESS_EXT}}"
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI {{ quote .DOWNLOAD_URL }} -OutFile $zip_file
            Expand-Archive -Path $zip_file -DestinationPath $tmp_dir
            $bin_file = Join-Path -Path $tmp_dir -ChildPath {{ print .PACKAGE_DIR | osClean }} | Join-Path -ChildPath {{ print .FILE_NAME | osClean }}
            Copy-Item -Path $bin_file -Destination {{ print .BIN_DIR | osClean }}
            Remove-Item -Path $tmp_dir -Recurse

          EOT
        platforms: [windows]
    status:
      - '"{{ print .BIN_DIR .FS_PATH_SEP .NAME exeExt | osClean }}" --version'

  dl-ouch:
    # https://github.com/ouch-org/ouch
    desc: Install 'ouch', painless compression and decompression for your terminal
    deps:
      - create-bin-dir
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v curl{{ end }}'
        msg: |
          curl is required to download files. Please install 'curl' and try again.
      - sh: '{{ if ne OS "windows"}}command -v tar{{ end }}'
        msg: |
          tar is required to extract files from archives. Please install 'tar' and try again.
      - sh: '{{ if ne OS "windows"}}command -v gunzip{{ end }}'
        msg: |
          gunzip is required to uncompress files. Please install 'gunzip'/'gzip' and try again.
    vars:
      # Order matters!
      NAME: ouch
      OWNER: ouch-org
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: '{{.NAME}}{{exeExt}}'
      BIN_NAME: '{{ print .BIN_DIR .FS_PATH_SEP .FILE_NAME | osClean }}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      ARCH: '{{ if or (eq ARCH "amd64") (eq ARCH "arm64") }}x86_64{{ else }}{{ARCH}}{{ end }}'
      ASSET_PATTERN: '{{.NAME}}-{{.ARCH}}-*-{{OS}}{{ if eq OS "linux"}}-musl{{ else if eq OS "windows" }}-gnu{{ end }}{{.COMPRESS_EXT}}'
      REPO_URL: 'https://api.github.com/repos/{{.REPO}}/releases/latest'
      # FIXME: The dynamic variables are executed before determining the status, resulting in 2 unauthenticated calls
      # FIXME: to the GitHub API. This should be fixed.
      # FIXME: More importantly, tasks that depend on 'xh' will also result in 2 API calls.
      # FIXME: If many tasks are run concurrently, it's possible to exceed the API limits and get locked out for a
      # FIXME: minute.
      DOWNLOAD_URL:
        sh: |
          "{{ print .BIN_DIR .FS_PATH_SEP "xh" exeExt | osClean }}" --follow --body GET {{ squote .REPO_URL }} |
          "{{ print .BIN_DIR .FS_PATH_SEP "yq" exeExt | osClean }}" --unwrapScalar '.assets[] | select(.name=={{ quote .ASSET_PATTERN }}) | .browser_download_url'
      PACKAGE_NAME:
        sh: |
          "{{ print .BIN_DIR .FS_PATH_SEP "xh" exeExt | osClean }}" --follow --body GET {{ squote .REPO_URL }} |
          "{{ print .BIN_DIR .FS_PATH_SEP "yq" exeExt | osClean }}" --unwrapScalar '.assets[] | select(.name=={{ quote .ASSET_PATTERN }}) | .name'
      PACKAGE_DIR: '{{ trimSuffix .COMPRESS_EXT .PACKAGE_NAME }}'
    cmds:
      - cmd: |
          "{{ print .BIN_DIR .FS_PATH_SEP "xh" exeExt | osClean }}" --follow --body {{ squote .DOWNLOAD_URL }} |
          tar --directory "{{.BIN_DIR}}" --strip-components 1 -zxf - '{{ print .PACKAGE_DIR "/" .FILE_NAME | osClean }}'
          chmod a+x "{{.BIN_NAME}}"
        platforms: [linux, darwin]
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            $tmp_file = New-TemporaryFile
            Remove-Item -Path $tmp_file
            $tmp_dir = New-Item -ItemType Directory -Path $(Join-Path -Path $ENV:Temp -ChildPath $tmp_file.Name)
            $zip_file = Join-Path -Path $tmp_dir -ChildPath "{{.NAME}}{{.COMPRESS_EXT}}"
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI {{ quote .DOWNLOAD_URL }} -OutFile $zip_file
            Expand-Archive -Path $zip_file -DestinationPath $tmp_dir
            $bin_file = Join-Path -Path $tmp_dir -ChildPath "{{ osClean .PACKAGE_DIR }}" |
              Join-Path -ChildPath "{{ osClean .FILE_NAME }}"
            Copy-Item -Path $bin_file -Destination "{{.BIN_DIR}}"
            Remove-Item -Path $tmp_dir -Recurse

          EOT
        platforms: [windows]
    status:
      - '"{{ print .BIN_DIR .FS_PATH_SEP .NAME exeExt | osClean }}" --help'

  dl-coreutils:
    # https://github.com/uutils/coreutils
    desc: Install 'coreutils', cross-platform Rust rewrite of the GNU coreutils
    deps:
      - create-bin-dir
      - dl-yq
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v tar{{ end }}'
        msg: |
          tar is required to extract files from archives. Please install 'tar' and try again.
      - sh: '{{ if ne OS "windows"}}command -v gunzip{{ end }}'
        msg: |
          gunzip is required to uncompress files. Please install 'gunzip'/'gzip' and try again.
    vars:
      # Order matters!
      NAME: coreutils
      OWNER: uutils
      REPO: '{{.OWNER}}/{{.NAME}}'
      FILE_NAME: '{{.NAME}}{{exeExt}}'
      BIN_NAME: '{{ print .BIN_DIR .FS_PATH_SEP .FILE_NAME | osClean }}'
      COMPRESS_EXT: '{{ if eq OS "windows"}}.zip{{ else }}.tar.gz{{ end }}'
      # arm64 build for Apple darwin is in the works. Use x86_64 for now.
      # See https://github.com/uutils/coreutils/issues/4104
      ARCH: '{{ if or (eq ARCH "amd64") (eq ARCH "arm64") }}x86_64{{ else }}{{ARCH}}{{ end }}'
      ASSET_PATTERN: '{{.NAME}}-*-{{.ARCH}}-*-{{OS}}{{ if eq OS "linux"}}-musl{{ else if eq OS "windows" }}-gnu{{ end }}{{.COMPRESS_EXT}}'
      REPO_URL: 'https://api.github.com/repos/{{.REPO}}/releases/latest'
      # FIXME: The dynamic variables are executed before determining the status, resulting in 2 unauthenticated calls
      # FIXME: to the GitHub API. This should be fixed.
      # FIXME: More importantly, tasks that depend on 'xh' will also result in 2 API calls.
      # FIXME: If many tasks are run concurrently, it's possible to exceed the API limits and get locked out for a
      # FIXME: minute.
      DOWNLOAD_URL:
        sh: |
          "{{ print .BIN_DIR .FS_PATH_SEP "xh" exeExt | osClean }}" --follow --body GET {{ squote .REPO_URL }} |
          "{{ print .BIN_DIR .FS_PATH_SEP "yq" exeExt | osClean }}" --unwrapScalar '.assets[] | select(.name=={{ quote .ASSET_PATTERN }}) | .browser_download_url'
      PACKAGE_NAME:
        sh: |
          "{{ print .BIN_DIR .FS_PATH_SEP "xh" exeExt | osClean }}" --follow --body GET {{ squote .REPO_URL }} |
          "{{ print .BIN_DIR .FS_PATH_SEP "yq" exeExt | osClean }}" --unwrapScalar '.assets[] | select(.name=={{ quote .ASSET_PATTERN }}) | .name'
      PACKAGE_DIR: '{{ trimSuffix .COMPRESS_EXT .PACKAGE_NAME }}'
    cmds:
      - cmd: |
          "{{ print .BIN_DIR .FS_PATH_SEP "xh" exeExt | osClean }}" --follow --body {{ squote .DOWNLOAD_URL }} |
          tar --directory "{{.BIN_DIR}}" --strip-components 1 -zxf - "{{ print .PACKAGE_DIR .FS_PATH_SEP .FILE_NAME | osClean }}"
          chmod a+x "{{.BIN_NAME}}"
        platforms: [linux, darwin]
      - cmd: |
          powershell -NonInteractive -NoProfile -NoLogo -InputFormat text -OutputFormat text -Command - << 'EOT'
            $tmp_file = New-TemporaryFile
            Remove-Item -Path $tmp_file
            $tmp_dir = New-Item -ItemType Directory -Path $(Join-Path -Path $ENV:Temp -ChildPath $tmp_file.Name)
            $zip_file = Join-Path -Path $tmp_dir -ChildPath "{{.NAME}}{{.COMPRESS_EXT}}"
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest -URI {{ quote .DOWNLOAD_URL }} -OutFile $zip_file
            Expand-Archive -Path $zip_file -DestinationPath $tmp_dir
            $bin_file = Join-Path -Path $tmp_dir -ChildPath "{{ osClean .PACKAGE_DIR }}" |
              Join-Path -ChildPath "{{ osClean .FILE_NAME }}"
            Copy-Item -Path $bin_file -Destination "{{.BIN_DIR}}"
            Remove-Item -Path $tmp_dir -Recurse

          EOT
        platforms: [windows]
    status:
      - '"{{ print .BIN_DIR .FS_PATH_SEP .NAME exeExt | osClean }}" --help'
