---
version: '3'

# Variables are global with precedence hierarchy.
vars:
  TRMM_DEFAULT_REPO_DIR: '/opt/trmm-community-scripts/'
  TRMM_DEFAULT_UPSTREAM_NAME: 'myscripts'
  TRMM_DEFAULT_UPSTREAM_BRANCH: 'main'
  TRMM_DEFAULT_USER: 'tactical'
  TRMM_DEFAULT_MGMT_DIR: '/rmm/api/tacticalrmm'
  TRMM_DEFAULT_COMMUNITY_JSON: 'community_scripts.json'
  TRMM_DEFAULT_SCRIPT_PREFIX: 'ðŸ˜Ž {{.TRMM_DEFAULT_UPSTREAM_NAME}} - '

tasks:

  scripts-repo-init:
    desc: Add and initialize an upstream repo to the Tactical RMM community scripts.
    summary: |
      This task will add a remote repo as an upstream repo to the TRMM community_scripts.
      The community scripts will be pushed to the new repo.
      An example "Hello World!" script and JSON will be added and pushed to the remote repo.
      The two JSON files defining the community script and the scripts in the upstream repo
        will be merged.
      Finally, the scripts are loaded into Tactical RMM to be made available in the
        script manager.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_REPO: Upstream repo URL. Required.
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
       - UPSTREAM_BRANCH: Upstream branch to track. Default: '{{.TRMM_DEFAULT_UPSTREAM_BRANCH}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH | default .TRMM_DEFAULT_UPSTREAM_BRANCH }}'
    platforms: [linux]
    deps:
      - :install:rg
    preconditions:
      - sh: '[ "{{.REPO_DIR}}" != "" ]'
        msg: REPO_DIR is not defined. Please set it to the community scripts directory.
      - sh: '[ "{{.UPSTREAM_REPO}}" != "" ]'
        msg: UPSTREAM_REPO is not defined. Please set it to the upstream git repo for your scripts.
    cmds:
      - cmd: 'echo "TRMM_USER: {{.TRMM_USER}}"'
      - cmd: 'echo "REPO_DIR: {{.REPO_DIR}}"'
      - cmd: 'echo "UPSTREAM_NAME: {{.UPSTREAM_NAME}}"'
      - cmd: 'echo "UPSTREAM_REPO: {{.UPSTREAM_REPO}}"'
      - cmd: 'echo "UPSTREAM_BRANCH: {{.UPSTREAM_BRANCH}}"'
      - task: scripts-repo-add-upstream
        vars: {
          TRMM_USER: '{{.TRMM_USER }}',
          REPO_DIR: '{{.REPO_DIR }}',
          UPSTREAM_NAME: '{{.UPSTREAM_NAME }}',
          UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH }}',
        }
      - task: scripts-repo-add-example
        vars: {
          TRMM_USER: '{{.TRMM_USER }}',
          REPO_DIR: '{{.REPO_DIR }}',
          UPSTREAM_NAME: '{{.UPSTREAM_NAME }}',
          UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH }}',
        }
      - task: scripts-repo-merge
        vars: {
          TRMM_USER: '{{.TRMM_USER }}',
          REPO_DIR: '{{.REPO_DIR }}',
          UPSTREAM_NAME: '{{.UPSTREAM_NAME }}',
          UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH }}',
        }

  scripts-repo-add-upstream:
    desc: Add an upstream repo to the Tactical RMM community scripts.
    summary: |
      This task will add a remote repo as an upstream repo to the TRMM community_scripts repo.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_REPO: Upstream repo URL. Required.
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
       - UPSTREAM_BRANCH: Upstream branch to track. Default: '{{.TRMM_DEFAULT_UPSTREAM_BRANCH}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH | default .TRMM_DEFAULT_UPSTREAM_BRANCH }}'
    platforms: [linux]
    deps:
      - :install:rg
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone and work with repos. Please install 'git' and try again.
      - sh: '[ "{{.REPO_DIR}}" != "" ]'
        msg: REPO_DIR is not defined. Please set it to the community scripts directory.
      - sh: '[ "{{.UPSTREAM_REPO}}" != "" ]'
        msg: UPSTREAM_REPO is not defined. Please set it to the upstream git repo for your scripts.
    cmds:
      - cmd: 'echo "TRMM_USER: {{.TRMM_USER}}"'
      - cmd: 'echo "REPO_DIR: {{.REPO_DIR}}"'
      - cmd: 'echo "UPSTREAM_NAME: {{.UPSTREAM_NAME}}"'
      - cmd: 'echo "UPSTREAM_REPO: {{.UPSTREAM_REPO}}"'
      - cmd: 'echo "UPSTREAM_BRANCH: {{.UPSTREAM_BRANCH}}"'
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git remote add {{ if .UPSTREAM_BRANCH }}--track {{ squote .UPSTREAM_BRANCH}}{{ end }} {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_REPO}}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git remote -v
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git push --verbose {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_BRANCH }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
    status:
      - |
        {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
          cd {{ squote .REPO_DIR }}
          git remote -v | rg --quiet {{ squote (print "^" .UPSTREAM_NAME) }}
        {{ if ne .USER .TRMM_USER }}EOT{{ end }}

  scripts-repo-add-example:
    desc: Add an example and commit to the upstream repo.
    summary: |
      This task will add a "Hello World!" script to the upstream repo to be used as an example.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
       - UPSTREAM_BRANCH: Upstream branch to track. Default: '{{.TRMM_DEFAULT_UPSTREAM_BRANCH}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH | default .TRMM_DEFAULT_UPSTREAM_BRANCH }}'
      UPSTREAM_JSON: 'community_scripts-{{.UPSTREAM_NAME}}.json'
      HELLO_WORLD: 'hello-world.sh'
    deps:
      - :init:all
    preconditions:
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone repos. Please install 'git' and try again.
      - sh: '[ "{{.REPO_DIR}}" != "" ]'
        msg: 'REPO_DIR is not defined. Please set it to the community scripts directory.'
      - sh: '[ "{{.UPSTREAM_NAME}}" != "" ]'
        msg: 'UPSTREAM_NAME is not defined. Please set it to the name of an upstream git repo.'
      - sh: '[ "{{.UPSTREAM_BRANCH}}" != "" ]'
        msg: 'UPSTREAM_BRANCH is not defined. Please set it to the name of the upstream branch.'
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            cat << 'EOJ' | yq --output-format=json --no-colors > {{ squote .UPSTREAM_JSON }} '.'
              [{
                "guid": "525048e9-f25b-4ffc-bb13-0d098d56430e",
                "filename": "../{{.UPSTREAM_NAME}}/{{.HELLO_WORLD}}",
                "submittedBy": "{{.UPSTREAM_NAME}}",
                "name": "ðŸ”§ Example - Hello World",
                "description": "Hello World example to demonstrate merging community scripts.",
                "syntax": "",
                "args": [],
                "default_timeout": "10",
                "shell": "shell",
                "supported_platforms": [
                  "linux",
                  "darwin"
                ],
                "category": "TRMM (All):Other"
              }]
          EOJ
            git add {{ squote .UPSTREAM_JSON }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            mkdir {{ squote .UPSTREAM_NAME }}
            cat << 'EOF' > {{ squote (print .UPSTREAM_NAME "/" .HELLO_WORLD) }}
          #!/usr/bin/env bash

          # Feel free to delete this example script from the directory and JSON
          # Filename: {{ squote (print .UPSTREAM_NAME "/" .HELLO_WORLD) }}
          # JSON: {{ squote .UPSTREAM_JSON }}
          echo "Hello World!"
          EOF
            git add {{ squote (print .UPSTREAM_NAME "/" .HELLO_WORLD) }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git commit --message 'First commit to upstream {{ quote .UPSTREAM_NAME }}'
            git push --verbose {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_BRANCH }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
    status:
      - '[ -f "{{.REPO_DIR}}/{{.UPSTREAM_NAME}}/{{.HELLO_WORLD}}" ]'
      - '[ -f "{{.REPO_DIR}}/{{.UPSTREAM_JSON}}" ]'

  scripts-repo-merge:
    desc: Merge the custom scripts with the community scripts.
    summary: |
      This task will merge the upstream scripts with the community scripts.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
       - SCRIPT_PREFIX: Prefix name for all upstream scripts. Default: '{{.TRMM_DEFAULT_SCRIPT_PREFIX}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      SCRIPT_PREFIX: '{{.SCRIPT_PREFIX | default .TRMM_DEFAULT_SCRIPT_PREFIX }}'
      COMMUNITY_JSON: 'community_scripts.json'
      UPSTREAM_JSON: 'community_scripts-{{.UPSTREAM_NAME}}.json'
      MGMT_CMD: 'load_community_scripts'
    preconditions:
      - task: :init:all
      - task: :install:yq
      - sh: '[ "{{.REPO_DIR}}" != "" ]'
        msg: 'REPO_DIR is not defined. Please set it to the community scripts directory.'
      - sh: '! [ -f "{{.COMMUNITY_JSON}}" ]'
        msg: 'The community JSON file "{{.COMMUNITY_JSON}}" does not exist.'
      - sh: '! [ -f "{{.UPSTREAM_JSON}}" ]'
        msg: 'The upstream JSON file "{{.UPSTREAM_JSON}}" does not exist.'
    platforms: [linux]
    cmds:
      - cmd: 'echo "REPO_DIR: {{.REPO_DIR}}"'
      - cmd: 'echo "COMMUNITY_JSON: {{.COMMUNITY_JSON}}"'
      - cmd: 'echo "UPSTREAM_JSON: {{.UPSTREAM_JSON}}"'
      # Validate both JSON files before merging.
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            yq 'true' {{ squote .COMMUNITY_JSON }} --output-format=json
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            yq 'true' {{ squote .UPSTREAM_JSON }} --output-format=json
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            yq eval-all --inplace --output-format=json \
              'select(fileIndex == 0) + (select(fileIndex == 1) | .[].name |= ("{{.SCRIPT_PREFIX}}" + .))' \
              {{ squote .COMMUNITY_JSON }} \
              {{ squote .UPSTREAM_JSON }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - task: management-command
        vars: {
          MGMT_CMD: '{{.MGMT_CMD}}',
        }

  scripts-repo-reset:
    desc: Remove the upstream repo and reset the community scripts.
    summary: |
      This task will remove the upstream repo and reset or revert the community scripts to the original. This will undo
      the 'scripts-repo-init' task.
      Important:
       - This task does NOT change the upstream repository!
       - This task DOES remove the remote (custom) scripts from Tactical.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      MGMT_CMD: 'load_community_scripts'
    preconditions:
      - task: :init:all
      - task: :install:yq
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone and work with repos. Please install 'git' and try again.
      - sh: '[ "{{.REPO_DIR}}" != "" ]'
        msg: 'REPO_DIR is not defined. Please set it to the community scripts directory.'
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git remote remove {{ squote .UPSTREAM_NAME }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git reset --hard origin/main
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - task: management-command
        vars: {
          MGMT_CMD: '{{.MGMT_CMD}}',
        }

  scripts-repo-update:
    desc: Update the local community scripts repo from the remote upstream.
    summary: |
      This task will update the local community scripts repo from the remote upstream of custom scripts. Local changes
      are pushed upstream before pulling from upstream.

      variables:
       - TRMM_USER: Linux user to run Tactical commands. Default: '{{.TRMM_DEFAULT_USER}}'
       - REPO_DIR: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_REPO_DIR}}'
       - UPSTREAM_NAME: Upstream repo name. Default: '{{.TRMM_DEFAULT_UPSTREAM_NAME}}'
    vars:
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      REPO_DIR: '{{.REPO_DIR | default .TRMM_DEFAULT_REPO_DIR }}'
      UPSTREAM_NAME: '{{.UPSTREAM_NAME | default .TRMM_DEFAULT_UPSTREAM_NAME }}'
      UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH | default .TRMM_DEFAULT_UPSTREAM_BRANCH }}'
      MGMT_CMD: 'load_community_scripts'
    preconditions:
      - task: :init:all
      - task: :install:yq
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone and work with repos. Please install 'git' and try again.
      - sh: '[ "{{.REPO_DIR}}" != "" ]'
        msg: 'REPO_DIR is not defined. Please set it to the community scripts directory.'
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git push --verbose {{ squote .UPSTREAM_NAME }} {{ squote .UPSTREAM_BRANCH }}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .REPO_DIR }}
            git reset --hard origin/main
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - task: management-command
        vars: {
          MGMT_CMD: '{{.MGMT_CMD}}',
        }

  management-command:
    desc: Run a TRMM management command in the Python console.
    summary: |
      This task run a TRMM management command in the Python console.
    vars:
      MGMT_DIR: '{{.MGMT_DIR | default .TRMM_DEFAULT_MGMT_DIR }}'
      TRMM_USER: '{{.TRMM_USER | default .TRMM_DEFAULT_USER }}'
      MGMT_CMD: '{{.MGMT_CMD}}'
      MGMT_ARGS: '{{.CLI_ARGS | default .MGMT_ARGS }}'
    preconditions:
      - sh: '[ "{{.MGMT_DIR}}" != "" ]'
        msg: 'MGMT_DIR is not defined. Please set it to the directory to run the management commands.'
      - sh: '[ "{{.TRMM_USER}}" != "" ]'
        msg: 'TRMM_USER is not defined. Please set it to the user to run the management commands.'
      - sh: '[ "{{.MGMT_CMD}}" != "" ]'
        msg: 'MGMT_CMD is not defined. Please set it to the management command you want to run.'
      - sh: '! [ -f "/rmm/api/tacticalrmm/tacticalrmm/local_settings.py" ]'
        msg: 'Tactical does not appear to be installed. Management commands can only be run on a Tactical instance.'
    platforms: [linux]
    cmds:
      - cmd: 'echo "MGMT_DIR: {{.MGMT_DIR}}"'
      - cmd: 'echo "TRMM_USER: {{.TRMM_USER}}"'
      - cmd: 'echo "MGMT_CMD: {{.MGMT_CMD}}"'
      - cmd: 'echo "MGMT_ARGS: {{.MGMT_ARGS}}"'
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .MGMT_DIR }}
            source ../env/bin/activate
            python manage.py {{.MGMT_CMD}} {{.MGMT_ARGS}}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
