---
version: '3'

# Variables are global with precedence hierarchy.
vars:
  TRMM_DEFAULT_MGMT_DIR: '/rmm/api/tacticalrmm'
  TRMM_DEFAULT_LOCAL_SETTINGS: '/rmm/api/tacticalrmm/tacticalrmm/local_settings.py'
  TRMM_DEFAULT_COMMUNITY_PATH: '/opt/trmm-community-scripts/'
  TRMM_DEFAULT_COMMUNITY_JSON: 'community_scripts.json'

tasks:

  community-repo-reset:
    desc: Reset the community scripts to the last commit from upstream
    summary: |
      This task will reset or revert the community scripts to their original upstream version. All local changes will
      be lost. This task does NOT (re)load the community scripts into TRMM.

      variables:
       - COMMUNITY_PATH: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_COMMUNITY_PATH}}'
    vars:
      TRMM_USER:
        sh: |
          task --silent trmm:config-get-tactical-user
      COMMUNITY_PATH: '{{.COMMUNITY_PATH | default .TRMM_DEFAULT_COMMUNITY_PATH }}'
    preconditions:
      - task: :init:dl-yq
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone and work with repos. Please install 'git' and try again.
      - sh: '[ ! -z {{ quote .COMMUNITY_PATH }} ]'
        msg: |
          COMMUNITY_PATH {{ quote .COMMUNITY_PATH }} is not defined. Please set it to the community scripts directory.
      - sh: '[ ! -z {{ squote .TRMM_USER }} ]'
        msg: |
          TRMM_USER {{ quote .TRMM_USER }} is empty. Could not determine the tactical os user.
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .COMMUNITY_PATH }}
            git reset --hard origin/main
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}

  community-repo-update:
    desc: Update the local community scripts repo and load into TRMM
    summary: |
      This task will update the local community scripts repo from GitHub. All local changes are reverted before pulling.
      The community scripts will be loaded into TRMM.

      variables:
       - COMMUNITY_PATH: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_COMMUNITY_PATH}}'
    vars:
      TRMM_USER:
        sh: |
          task --silent trmm:config-get-tactical-user
      COMMUNITY_PATH: '{{.COMMUNITY_PATH | default .TRMM_DEFAULT_COMMUNITY_PATH }}'
    preconditions:
      - task: :init:dl-yq
      - sh: '{{ if ne OS "windows"}}command -v git{{ end }}'
        msg: |
          git is required to clone and work with repos. Please install 'git' and try again.
      - sh: '[ ! -z {{ quote COMMUNITY_PATH }} ]'
        msg: |
          COMMUNITY_PATH is not defined. Please set it to the community scripts directory.
      - sh: '[ ! -z {{ squote .TRMM_USER }} ]'
        msg: |
          TRMM_USER {{ quote .TRMM_USER }} is empty. Could not determine the tactical os user.
    platforms: [linux]
    cmds:
      - task: community-repo-reset
        vars: {
          COMMUNITY_PATH: '{{.COMMUNITY_PATH}}',
        }
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .COMMUNITY_PATH }}
            git pull
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}
      - task: management-command-load-community-scripts

  config-get-value:
    desc: Get the value of a config key from the TRMM config file
    summary: |
      This task will get a config key from the TRMM 'local_config.py' configuration file, and then process it with
      the JSON_EXP to get a single value.

      variables:
       - CONFIG_KEY: Variable in 'local_settings.py' that you want to get. Required.
       - JSON_EXP: JSON expression to retrieve the value in CONFIG_KEY. If empty, CONFIG_KEY is not processed by 'yq'.
    vars:
      LOCAL_SETTINGS: '{{.LOCAL_SETTINGS | default .TRMM_DEFAULT_LOCAL_SETTINGS }}'
      CONFIG_KEY: '{{.CONFIG_KEY}}'
      JSON_EXP: '{{.JSON_EXP}}'
    preconditions:
      - task: :init:dl-yq
      - sh: '{{ if ne OS "windows"}}command -v python3{{ end }}'
        msg: |
          python3 is required to parse the local config file. Is this a TRMM instance?
      - sh: '[ -f {{ squote .TRMM_DEFAULT_LOCAL_SETTINGS }} ]'
        msg: |
          TRMM does not appear to be installed. This task can only be run on a TRMM instance.
      - sh: '[ -f {{ squote .LOCAL_SETTINGS }} ]'
        msg: |
          LOCAL_SETTINGS {{ quote .LOCAL_SETTINGS }} does not exist. This task can only be run on a TRMM instance.
      - sh: '[ ! -z {{ squote .CONFIG_KEY }} ]'
        msg: |
          CONFIG_KEY {{ quote .CONFIG_KEY }} was not specified or is empty.
    platforms: [linux]
    cmds:
      - cmd: |
          dir={{ squote .LOCAL_SETTINGS }}
          cd ${dir%/*}
          python3 -c 'import local_settings as conf; print(conf.{{.CONFIG_KEY}});' {{ if .JSON_EXP }}|
            yq --output-format=json --unwrapScalar {{ squote .JSON_EXP }}{{ end }}

  config-get-tactical-user:
    desc: Get the OS user running TRMM
    summary: |
      Get the OS user for running TRMM as determined by the owner of the 'local_settings.py' file.
    platforms: [linux]
    vars:
      LOCAL_SETTINGS: '{{.LOCAL_SETTINGS | default .TRMM_DEFAULT_LOCAL_SETTINGS }}'
    preconditions:
      - sh: '[ -f {{ squote .LOCAL_SETTINGS }} ]'
        msg: |
          LOCAL_SETTINGS {{ quote .LOCAL_SETTINGS }} does not exist. This task can only be run on a TRMM instance.
    cmds:
      - task: :filesystem:file-get-user
        vars: {
          FILE_PATH: '{{.LOCAL_SETTINGS}}',
        }
  management-command:
    desc: Run a TRMM management command in the Python console
    summary: |
      This task run a TRMM management command in the Python console.
    vars:
      MGMT_DIR: '{{.MGMT_DIR | default .TRMM_DEFAULT_MGMT_DIR }}'
      TRMM_USER:
        sh: |
          task --silent trmm:config-get-tactical-user
      MGMT_CMD: '{{.MGMT_CMD}}'
      MGMT_ARGS: '{{.CLI_ARGS | default .MGMT_ARGS }}'
    preconditions:
      - sh: '[ -f {{ squote .TRMM_DEFAULT_LOCAL_SETTINGS }} ]'
        msg: |
          Tactical does not appear to be installed. Management commands can only be run on a Tactical instance.
      - sh: '[ ! -z {{ quote .MGMT_DIR }} ]'
        msg: |
          MGMT_DIR {{ quote .MGMT_DIR }} is not defined. Please set it to the directory to run the management commands.
      - sh: '[ ! -z {{ quote .MGMT_CMD }} ]'
        msg: |
          MGMT_CMD {{ quote .MGMT_CMD }} is not defined. Please set it to the management command you want to run.
      - sh: '[ ! -z {{ squote .TRMM_USER }} ]'
        msg: |
          TRMM_USER {{ quote .TRMM_USER }} is empty. Could not determine the tactical os user.
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if ne .USER .TRMM_USER }}su {{.TRMM_USER}} << 'EOT'{{ end }}
            cd {{ squote .MGMT_DIR }}
            source ../env/bin/activate
            python manage.py {{.MGMT_CMD}} {{.MGMT_ARGS}}
          {{ if ne .USER .TRMM_USER }}EOT{{ end }}

  management-command-load-community-scripts:
    desc: Load the TRMM community scripts into the database
    summary: |
      This task will load the TRMM community scripts into the database.
    vars:
      MGMT_DIR: '{{.MGMT_DIR | default .TRMM_DEFAULT_MGMT_DIR }}'
      MGMT_CMD: 'load_community_scripts'
    preconditions:
      - sh: '[ -f {{ squote .TRMM_DEFAULT_LOCAL_SETTINGS }} ]'
        msg: |
          Tactical does not appear to be installed. Management commands can only be run on a Tactical instance.
    platforms: [linux]
    cmds:
      - task: management-command
        vars: {
          MGMT_DIR: '{{.MGMT_DIR}}',
          MGMT_CMD: '{{.MGMT_CMD}}',
        }
