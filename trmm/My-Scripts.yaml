---
version: '3'

# Variables are global with precedence hierarchy.
vars:
  MY_SCRIPTS_DEFAULT_NAME_PREFIX: 'ðŸ˜Ž My Scripts - '
  MY_SCRIPTS_DEFAULT_DIR: 'scripts/'
  MY_SCRIPTS_DEFAULT_JSON: '*.json'

tasks:

  export-import:
    desc: Export MY_SCRIPTS from the database, merge them with the community scripts and import into TRMM.
    summary: |
      This task will perform the following tasks using defaults for almost all values. If you want more control over
      the customization, run the tasks individually.
      1. Export the custom (user created) scripts from the database and save them as files in the
         MY_SCRIPTS_DIR directory. The script definitions will be appended to the MY_SCRIPTS_JSON file.
      2. The community scripts repo will be reset to undo previous "merges".
      3. The custom scripts MY_SCRIPTS_JSON will be merged with the community scripts JSON file, applying the
         following transformations.
         - The 'filename' will point to the custom scripts repo MY_SCRIPTS_PATH.
         - The 'name' will be prepended with the MY_SCRIPTS_NAME_PREFIX.
      4. The TRMM management command will be run to load the community scripts into the database. This effectively
         makes the custom scripts read-only as it is now considered part of the "community scripts".

      variables:
       - MY_SCRIPTS_PATH: Full path to the custom scripts repo. Required.
    vars:
      MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}'
    preconditions:
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_PATH }} ]'
        msg: |
          MY_SCRIPTS_PATH {{ quote .MY_SCRIPTS_PATH }} is empty. Please set it to the path of the custom scripts repo.
    platforms: [linux]
    cmds:
      - task: export
        vars: {
          MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}',
        }
      - task: import
        vars: {
          MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}',
        }

  import:
    desc: Merge 'MY_SCRIPTS' with the community scripts and import into TRMM.
    summary: |
      This task will merge the JSON file for MY_SCRIPTS with the JSON file for the community scripts. The
      following transformations are applied during the merge.
       1. MY_SCRIPTS_NAME_PREFIX is prepended to the script name. This helps separate or brand MY_SCRIPTS from the
          community scripts.
       2. The filename is modified to reflect the repo location. This is necessary for TRMM to import the file.

      variables:
       - COMMUNITY_PATH: 'community_scripts' repo directory. Default: '{{.TRMM_DEFAULT_COMMUNITY_PATH}}'
       - MY_SCRIPTS_PATH: Full path to the custom repo. Required.
       - MY_SCRIPTS_DIR: Script location inside the repo. Default: '{{.MY_SCRIPTS_DEFAULT_DIR}}'
       - MY_SCRIPTS_JSON: JSON definition file for the custom scripts. Default: Auto-detected with '*.json' wildcard.
       - MY_SCRIPTS_NAME_PREFIX: Prefix name for the custom scripts. Default: '{{.MY_SCRIPTS_DEFAULT_NAME_PREFIX}}'
    vars:
      TRMM_USER:
        sh: |
          task --silent trmm:config-get-tactical-user
      COMMUNITY_PATH: '{{.COMMUNITY_PATH | default .TRMM_DEFAULT_COMMUNITY_PATH }}'
      COMMUNITY_JSON:
        sh: |
          task --silent filesystem:expand-glob FILE_GLOB={{ squote .COMMUNITY_PATH }}/{{.TRMM_DEFAULT_COMMUNITY_JSON}}
      MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}'
      MY_SCRIPTS_JSON:
        sh: |
          task --silent trmm-my-scripts:get-json MY_SCRIPTS_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_DIR:
        sh: |
          task --silent trmm-my-scripts:get-dir MY_SCRIPTS_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_DIR_PREFIX: '{{ trimPrefix .MY_SCRIPTS_PATH .MY_SCRIPTS_DIR | trimPrefix "/" }}'
      MY_SCRIPTS_NAME_PREFIX: '{{.MY_SCRIPTS_NAME_PREFIX | default .MY_SCRIPTS_DEFAULT_NAME_PREFIX }}'
    preconditions:
      - task: :install:yq
      - sh: '[ ! -z {{ squote .TRMM_USER }} ]'
        msg: |
          TRMM_USER {{ quote .TRMM_USER }} is empty. Could not determine the tactical os user.
      - sh: '[ ! -z {{ squote .COMMUNITY_PATH }} ]'
        msg: |
          COMMUNITY_PATH {{ quote .COMMUNITY_PATH }} is empty. Please set it to the community scripts directory.
      - sh: '[ -f {{ squote .COMMUNITY_JSON }} ]'
        msg: |
          The community JSON file {{ quote .COMMUNITY_JSON }} does not exist.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_PATH }} ]'
        msg: |
          MY_SCRIPTS_PATH {{ quote .MY_SCRIPTS_PATH }} is empty. Please set it to the path of "my scripts" repo.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_JSON }} ]'
        msg: |
          The JSON file {{ quote .MY_SCRIPTS_JSON}} expanded to {{ quote .MY_SCRIPTS_JSON }} does not exist in "my scripts" repo {{ quote .MY_SCRIPTS_PATH }}.
          Set MY_SCRIPTS_JSON to the scripts JSON file.
      - sh: '[ -f {{ squote .MY_SCRIPTS_JSON }} ]'
        msg: |
          The JSON file {{ quote .MY_SCRIPTS_JSON}} does not exist in the custom repo {{ quote .MY_SCRIPTS_PATH }}.
          Nothing to merge with the community scripts.
    platforms: [linux]
    cmds:
      - task: :trmm:community-repo-reset
        vars: {
          TRMM_USER: '{{.TRMM_USER}}',
          COMMUNITY_PATH: '{{.COMMUNITY_PATH}}',
        }
      - task: :json:file-append
        vars: {
          ORIGINAL_FILE: '{{.COMMUNITY_JSON}}',
          APPENDED_FILE: '{{.MY_SCRIPTS_JSON}}',
          SU_USER: '{{.TRMM_USER}}',
          APPENDED_TRANSFORMATION: '.[].name |= ({{ quote .MY_SCRIPTS_NAME_PREFIX }} + .) | .[].filename |= ("../..{{.MY_SCRIPTS_PATH}}/" + .)',
        }
      - task: :trmm:management-command-load-community-scripts

  export:
    desc: Export your custom scripts from the database
    summary: |
      This task will export the custom scripts in the database to files in MY_SCRIPTS repo and append to the JSON file.
      No attempt is made to check if the script is not already in the JSON. Use NAME_PATTERN to export a subset of the
      scripts.

      variables:
       - NAME_PATTERN: Custom script name to export. Database wildcards % (anything) and _ (any character) are supported.
       - MY_SCRIPTS_PATH: Custom scripts repo directory. Required
    vars:
      POSTGRES_USER:
        sh: |
          task --silent system:user-exists CHECK_USER=postgres
      POSTGRES_DB:
        sh: |
          task --silent trmm:config-get-value CONFIG_KEY=DATABASES JSON_EXP='.default.NAME'
      NAME_PATTERN: '{{.CLI_ARGS | default .NAME_PATTERN}}'
      MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}'
      MY_SCRIPTS_DIR:
        sh: |
          task --silent trmm-my-scripts:get-dir MY_SCRIPTS_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_JSON:
        sh: |
          task --silent trmm-my-scripts:get-json MY_SCRIPTS_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_USER:
        sh: |
          task --silent filesystem:file-get-user FILE_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_DIR_PREFIX: '{{ trimPrefix .MY_SCRIPTS_PATH .MY_SCRIPTS_DIR | trimPrefix "/" }}'
      TMP_JSON:
        sh: |
          mktemp
    preconditions:
      - task: :install:yq
      - sh: '{{ if ne OS "windows"}}command -v psql{{ end }}'
        msg: |
          psql is required to export data from the database. Please install 'psql' and try again.
      - sh: '{{ if ne OS "windows"}}command -v base64{{ end }}'
        msg: |
          base64 is required to encode JSON. Please install 'base64' and try again.
      - sh: '[ -f {{ squote .TRMM_DEFAULT_LOCAL_SETTINGS }} ]'
        msg: |
          Tactical does not appear to be installed. Management commands can only be run on a Tactical instance.
      - sh: '[ ! -z {{ squote .POSTGRES_USER }} ]'
        msg: |
          POSTGRES_USER {{ quote .POSTGRES_USER }} does not exist. Could not detect the 'postgres' system user.
      - sh: '[ ! -z {{ squote .POSTGRES_DB }} ]'
        msg: |
          POSTGRES_DB {{ quote .POSTGRES_DB }} is empty. Could not determine the tactical database from the config.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_PATH }} ]'
        msg: |
          MY_SCRIPTS_PATH {{ quote .MY_SCRIPTS_PATH }} is empty. Please set it to the path of "MY_SCRIPTS" repo.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_JSON }} ]'
        msg: |
          MY_SCRIPTS_JSON {{ quote .MY_SCRIPTS_JSON }} is empty and could not find *.json. Please set it to the name
          of the "MY_SCRIPTS" JSON file.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_DIR }} ]'
        msg: |
          MY_SCRIPTS_DIR {{ quote .MY_SCRIPTS_DIR }} is empty. Please set it to the name of the "scripts" directory
          in the "MY_SCRIPTS" repo.
    platforms: [linux]
    cmds:
      - cmd: |
          {{ if eq .USER "root" }}
            chown {{.POSTGRES_USER}} {{ squote .TMP_JSON }}
            chmod a+r {{ squote .TMP_JSON }}
          {{ end }}
          {{ if ne .USER .POSTGRES_USER }}su {{.POSTGRES_USER}} << 'EOT'{{ end }}
            cat << 'EOSQL' | psql --quiet {{.POSTGRES_DB}} | yq '.' > {{ squote .TMP_JSON }}
              \t\a
              select json_agg(j)
              from (
                SELECT
                  id,
                  guid,
                  filename,
                  created_by as "submittedBy",
                  name,
                  description,
                  syntax,
                  args,
                  default_timeout,
                  shell,
                  supported_platforms,
                  category,
                  script_body
                  -- script_type is not needed in the output
                  -- env_vars are not supported in the JSON
                  -- hidden is not in the JSON
                  -- run_as_user is not in the JSON
                  -- favorite is not in the JSON
                FROM scripts_script
                WHERE script_type = 'userdefined'
                {{- if .NAME_PATTERN }}
                  AND name LIKE {{ squote .NAME_PATTERN }}
                {{ end -}}
                LIMIT 50
              ) as j
          EOSQL
          {{ if ne .USER .POSTGRES_USER }}EOT{{ end }}
      - cmd: |
          for id in $(yq --output-format=json '.[].id' < {{ squote .TMP_JSON}})
          do
            json64=$(yq --output-format=json ".[] | select(.id == $id)" < {{.TMP_JSON}} | base64 -)
            task trmm-my-scripts:database-export-to-file \
              BASE64_JSON="$json64" \
              MY_SCRIPTS_PATH={{ squote .MY_SCRIPTS_PATH }} \
              MY_SCRIPTS_USER={{ squote .MY_SCRIPTS_USER }} \
              MY_SCRIPTS_JSON={{ squote .MY_SCRIPTS_JSON }} \
              MY_SCRIPTS_DIR={{ squote .MY_SCRIPTS_DIR }} \
              MY_SCRIPTS_DIR_PREFIX={{ squote .MY_SCRIPTS_DIR_PREFIX }}
          done
      - cmd: |
          [ -f {{ squote .TMP_JSON }} ] && rm {{ squote .TMP_JSON }}

  database-export-to-file:
    desc: Convert the JSON exported from the database to a JSON file and script file
    summary: |
      Given a JSON blob exported from the database representing a single script, this task will append it to the
      MY_SCRIPTS_JSON and save the script to a file in MY_SCRIPTS_DIR.
      Note: This is meant to be called from the 'export' task.

      variables:
       - BASE64_JSON: base64 encoded JSON exported from the database. Required.
       - MY_SCRIPTS_USER: OS user to fix the scripts file ownership.Required.
       - MY_SCRIPTS_JSON: Name of the scripts JSON file. Required.
       - MY_SCRIPTS_DIR: Directory of the custom scripts. Required.
       - MY_SCRIPTS_DIR_PREFIX: Directory prefix of the custom scripts to be used in the JSON. Required.
    vars:
      BASE64_JSON: '{{.BASE64_JSON}}'
      MY_SCRIPTS_USER: '{{.MY_SCRIPTS_USER}}'
      MY_SCRIPTS_JSON: '{{.MY_SCRIPTS_JSON}}'
      MY_SCRIPTS_DIR: '{{.MY_SCRIPTS_DIR}}'
      MY_SCRIPTS_DIR_PREFIX: '{{.MY_SCRIPTS_DIR_PREFIX}}'
    preconditions:
      - task: :install:yq
      - sh: '{{ if ne OS "windows"}}command -v tr{{ end }}'
        msg: |
          tr is required to translate character sets to sanitize the filename. Please install 'tr' and try again.
      - sh: '{{ if ne OS "windows"}}command -v base64{{ end }}'
        msg: |
          base64 is required to encode JSON. Please install 'base64' and try again.
      - sh: '[ -f {{ squote .TRMM_DEFAULT_LOCAL_SETTINGS }} ]'
        msg: 'Tactical does not appear to be installed. Management commands can only be run on a Tactical instance.'
    platforms: [linux]
    cmds:
      - cmd: |
          # Extract a sane filename
          filename=$(echo {{ squote .BASE64_JSON }} | base64 --decode - | yq --output-format=json --unwrapScalar ".name" |
            tr --complement --delete '\11\12\15\40-\176' | tr ' ' '_')
          filename=${filename##_}
          filename=${filename%%_}
          case $(echo {{ squote .BASE64_JSON }} | base64 --decode - | yq --output-format=json --unwrapScalar ".shell") in
            "powershell")
              filename="${filename}.ps1"
              ;;
            "shell")
              filename="${filename}.sh"
              ;;
            "python")
              filename="${filename}.py"
              ;;
            "cmd")
              filename="${filename}.cmd"
              ;;
          esac
          echo "Filename: $filename"
          # Save the script
          echo {{ squote .BASE64_JSON }} |
            base64 --decode - |
            yq --output-format=json --unwrapScalar '.script_body' > {{ squote .MY_SCRIPTS_DIR }}/"${filename}"
          # Convert the JSON to "import" format
          echo {{ squote .BASE64_JSON }} |
            base64 --decode - |
            yq --output-format=json --unwrapScalar "
                del(.id,.script_body) |
                .filename |= \"{{.MY_SCRIPTS_DIR_PREFIX}}/${filename}\" |
                .guid |= \"$(cat /proc/sys/kernel/random/uuid)\"
              " |
            yq eval-all --inplace --output-format=json 'select(fileIndex == 0) + select(fileIndex == 1)' {{ squote .MY_SCRIPTS_JSON }} -
      # Fix permissions if necessary
      - cmd: |
          {{ if and .MY_SCRIPTS_USER (ne .USER .MY_SCRIPTS_USER) }}
            chown {{.MY_SCRIPTS_USER}} {{ squote .MY_SCRIPTS_JSON }}
            chmod -R g+r {{ squote .PATH_DIR }}
          {{ end }}

  get-dir:
    desc: Get the scripts directory in MY_SCRIPTS repo
    summary: |
      Get the scripts directory in the MY_SCRIPTS repo. If not found, 'scripts' is created and returned.

      variables:
       - MY_SCRIPTS_PATH: Full path to the MY_SCRIPTS repo. Required.
       - MY_SCRIPTS_DIR: Directory inside MY_SCRIPTS repo. Default: 'scripts'
    platforms: [linux]
    vars:
      # MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}'
      MY_SCRIPTS_USER:
        sh: |
          task --silent filesystem:file-get-user FILE_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_DIR: '{{.MY_SCRIPTS_DIR | default "scripts"}}'
    preconditions:
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_PATH }} ]'
        msg: |
          MY_SCRIPTS_PATH {{ quote .MY_SCRIPTS_PATH }} is empty. Please set it to the path of MY_SCRIPTS repo.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_USER }} ]'
        msg: |
          MY_SCRIPTS_USER {{ quote .MY_SCRIPTS_USER }} is empty. Please set it to the path of MY_SCRIPTS repo.
    cmds:
      # TODO: Handle if MY_SCRIPTS_DIR exists but is not a directory
      - cmd: |
          {{ if ne .USER .MY_SCRIPTS_USER }}su {{.MY_SCRIPTS_USER}} << 'EOT'{{ end }}
            if [ ! -d {{ osClean (print .MY_SCRIPTS_PATH "/" .MY_SCRIPTS_DIR) | squote }} ]; then
              # Directory does not exist; create it
              mkdir --parents {{ osClean (print .MY_SCRIPTS_PATH "/" .MY_SCRIPTS_DIR) | squote }}
            fi
            echo {{ osClean (print .MY_SCRIPTS_PATH "/" .MY_SCRIPTS_DIR) | squote }}
          {{ if ne .USER .MY_SCRIPTS_USER }}EOT{{ end }}

  get-json:
    desc: Get the JSON script definition file in MY_SCRIPTS repo
    # FIXME: Handle multiple filenames, or at the very least allow a custom filename.
    summary: |
      Get the JSON script definition file in the MY_SCRIPTS repo. If not found, 'scripts.json' is created and returned.

      variables:
       - MY_SCRIPTS_PATH: Full path to the MY_SCRIPTS repo. Required.
       - MY_SCRIPTS_JSON_FILE: JSON filename if more than one file matches the *.json pattern. (Not implemented)
    platforms: [linux]
    vars:
      # MY_SCRIPTS_PATH: '{{.MY_SCRIPTS_PATH}}'
      MY_SCRIPTS_USER:
        sh: |
          task --silent filesystem:file-get-user FILE_PATH={{ squote .MY_SCRIPTS_PATH }}
      MY_SCRIPTS_JSON_FOUND:
        sh: |
          task --silent filesystem:expand-glob FILE_GLOB={{ squote .MY_SCRIPTS_PATH }}/*.json
      MY_SCRIPTS_JSON: '{{.MY_SCRIPTS_JSON_FOUND | default (print .MY_SCRIPTS_PATH "/scripts.json") }}'
      MY_SCRIPTS_VALID:
        sh: |
          task --silent json:is-valid JSON_FILE={{ squote .MY_SCRIPTS_JSON }}
    preconditions:
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_PATH }} ]'
        msg: |
          MY_SCRIPTS_PATH {{ quote .MY_SCRIPTS_PATH }} is empty. Please set it to the path of MY_SCRIPTS repo.
      - sh: '[ ! -z {{ squote .MY_SCRIPTS_USER }} ]'
        msg: |
          MY_SCRIPTS_USER {{ quote .MY_SCRIPTS_USER }} is empty. Please set it to the path of MY_SCRIPTS repo.
    cmds:
      - cmd: |
          {{ if ne .USER .MY_SCRIPTS_USER }}su {{.MY_SCRIPTS_USER}} << 'EOT'{{ end }}
            if [ -f {{ osClean .MY_SCRIPTS_JSON | squote }} ]; then
              # File exists
              {{ if .MY_SCRIPTS_VALID }}
                echo {{ osClean .MY_SCRIPTS_JSON | squote }}
              {{ else }}
                echo "Error: File exists and is invalid JSON"
                echo {{ osClean .MY_SCRIPTS_JSON | squote }}
                exit 1
              {{ end }}
            else
              # File does not exist; create it
              echo '[]' > {{ squote .MY_SCRIPTS_JSON }}
              echo {{ osClean .MY_SCRIPTS_JSON | squote }}
            fi
          {{ if ne .USER .MY_SCRIPTS_USER }}EOT{{ end }}
