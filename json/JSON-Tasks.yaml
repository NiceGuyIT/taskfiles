---
version: '3'

tasks:

  file-append:
    desc: Append (or merge) one JSON file onto another JSON file.
    summary: |
      This task will verify both JSON files are valid JSON files, and then append the 2nd file onto the first file.

      variables:
       - ORIGINAL_FILE: Original JSON file.
       - APPENDED_FILE: JSON file to append to the original.
       - ORIGINAL_TRANSFORMATION: JSON transformation to apply to the original file.
       - APPENDED_TRANSFORMATION: JSON transformation to apply to the appended file.
       - SU_USER: If set, the commands will be wrapped in 'su'.
    vars:
      ORIGINAL_FILE: '{{.ORIGINAL_FILE}}'
      APPENDED_FILE: '{{.APPENDED_FILE}}'
      ORIGINAL_TRANSFORMATION: '{{.ORIGINAL_TRANSFORMATION}}'
      APPENDED_TRANSFORMATION: '{{.APPENDED_TRANSFORMATION}}'
      SU_USER: '{{.SU_USER}}'
    preconditions:
      - task: :install:yq
      - sh: '[ ! -z {{ squote .ORIGINAL_FILE }} ]'
        msg: |
          ORIGINAL_FILE {{ quote .ORIGINAL_FILE }} is not defined. Please set it to the original file.
      - sh: '[ ! -z {{ squote .APPENDED_FILE }} ]'
        msg: |
          APPENDED_FILE {{ quote .APPENDED_FILE }} is not defined. Please set it to the file to append.
      - sh: '[ -f {{ squote .ORIGINAL_FILE }} ]'
        msg: |
          ORIGINAL_FILE {{ quote .ORIGINAL_FILE }} does not exist or is not a file. Please set it to the original file.
      - sh: '[ -f {{ squote .APPENDED_FILE }} ]'
        msg: |
          APPENDED_FILE {{ quote .APPENDED_FILE }} does not exist or is not a file. Please set it to the file to append.
    cmds:
#      - cmd: 'echo "ORIGINAL_FILE: {{.ORIGINAL_FILE}}"'
#      - cmd: 'echo "APPENDED_FILE: {{.APPENDED_FILE}}"'
#      - cmd: 'echo "ORIGINAL_TRANSFORMATION: {{.ORIGINAL_TRANSFORMATION}}"'
#      - cmd: 'echo "APPENDED_TRANSFORMATION: {{.APPENDED_TRANSFORMATION}}"'
#      - cmd: 'echo "SU_USER: {{.SU_USER}}"'
      # Validate both JSON files before merging.
      - cmd: |
          {{ if and .SU_USER (ne .USER .SU_USER) }}su {{.SU_USER}} << 'EOT'{{ end }}
            yq --output-format=json 'true' {{ squote .ORIGINAL_FILE }}
          {{ if and .SU_USER (ne .USER .SU_USER) }}EOT{{ end }}
      - cmd: |
          {{ if and .SU_USER (ne .USER .SU_USER) }}su {{.SU_USER}} << 'EOT'{{ end }}
            yq --output-format=json 'true' {{ squote .APPENDED_FILE }}
          {{ if and .SU_USER (ne .USER .SU_USER) }}EOT{{ end }}
      # '(select(fileIndex == 0)) + (select(fileIndex == 1) | .[].name |= ({{ quote SCRIPT_PREFIX }} + .))' \
      # https://github.com/mikefarah/yq/issues/1315#issuecomment-1228484442
      - cmd: |
          {{ if and .SU_USER (ne .USER .SU_USER) }}su {{.SU_USER}} << 'EOT'{{ end }}
            yq eval-all --inplace --output-format=json \
              '(select(fileIndex == 0) {{- if .ORIGINAL_TRANSFORMATION }} | {{ .ORIGINAL_TRANSFORMATION }} {{ end -}} )
                + (select(fileIndex == 1) {{- if .APPENDED_TRANSFORMATION }} | {{ .APPENDED_TRANSFORMATION }} {{ end -}} )' \
              {{ squote .ORIGINAL_FILE }} \
              {{ squote .APPENDED_FILE }}
          {{ if and .SU_USER (ne .USER .SU_USER) }}EOT{{ end }}

  is-valid:
    desc: Check if a JSON file is valid
    summary: |
      This task will verify that the JSON files is valid.
       - If the file is valid JSON, return the filename. This implies the file exists and is readable.
       - If the file is does not exist, cannot be read, or is invalid JSON, return nothing.

      variables:
       - JSON_FILE: Full path to the JSON file.
    preconditions:
      - task: :install:yq
#      - sh: '[ -f {{ squote .JSON_FILE }} ]'
#        msg: |
#          JSON_FILE {{ quote .JSON_FILE }} does not exist or is not a file. Please set it to the original file.
    cmds:
      # TODO: Does this need to be wrapped in 'su'?
      # Task needs an exit status of 0 or the task fails
      # TODO: Clean up the code to handle (ignore) exit statuses of commands.
      - cmd: |
          if [ -f {{ squote .JSON_FILE }} ]; then
            if yq --exit-status --output-format=json 'true' {{ squote .JSON_FILE }} 2>/dev/null; then
              echo {{ squote .JSON_FILE }}
            else
              exit 0
            fi
          else
            exit 0
          fi
